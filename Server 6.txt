#include <iostream>
#include <vector>
#include <cstdint>
#include <stdexcept>
#include <sstream>
#include <winsock2.h>
#include <windows.h>
#include <thread>
#pragma comment(lib, "ws2_32.lib")
#pragma warning(disable: 4996)
enum CommandOpcode {
CLEAR_DISPLAY_OPCODE,
DRAW_PIXEL_OPCODE,
DRAW_LINE_OPCODE,
DRAW_RECTANGLE_OPCODE,
FILL_RECTANGLE_OPCODE,
DRAW_ELLIPSE_OPCODE,
FILL_ELLIPSE_OPCODE,
DRAW_IMAGE_OPCODE,
DRAW_TEXT_OPCODE
};
struct Command {
const CommandOpcode opcode;
Command(const CommandOpcode opcode) : opcode(opcode) {};
virtual ~Command() {}
};
struct fillScreen : Command {
const uint16_t color;
fillScreen(const uint16_t color) : Command(CLEAR_DISPLAY_OPCODE), color(color) {};
};
struct DrawPixel : Command {
const int16_t x0, y0;
const int16_t newX, newY;
const uint16_t color;
DrawPixel(const int16_t x0, const int16_t y0, const int16_t newX, const int16_t newY, const
uint16_t color) :
Command(DRAW_PIXEL_OPCODE), x0(x0), y0(y0), newX(newX), newY(newY), 
color(color) {};
};
struct DrawLine : Command {
const int16_t x0, y0, x1, y1;
const uint16_t color;
DrawLine(const int16_t x0, const int16_t y0, const int16_t x1, const int16_t y1,
const uint16_t color) :
Command(DRAW_LINE_OPCODE), x0(x0), y0(y0), x1(x1), y1(y1), color(color) {}
};
struct DrawRectangle : Command {
const int16_t x0, y0, x1, y1;
const uint16_t color;
DrawRectangle(const int16_t x0, const int16_t y0, const int16_t x1, const int16_t y1,
const uint16_t color) :
Command(DRAW_RECTANGLE_OPCODE), x0(x0), y0(y0), x1(x1), y1(y1), color(color) 
{}
};
struct FillRectangle : Command {
const int16_t x0, y0, x1, y1;
const uint16_t color;
FillRectangle(const int16_t x0, const int16_t y0, const int16_t x1, const int16_t y1,
const uint16_t color) :
Command(FILL_RECTANGLE_OPCODE), x0(x0), y0(y0), x1(x1), y1(y1), color(color) {}
};
struct DrawEllipse : Command {
const int16_t x0, y0, rx, ry;
const uint16_t color;
DrawEllipse(const int16_t x0, const int16_t y0, const int16_t rx, const int16_t ry,
const uint16_t color) :
Command(DRAW_ELLIPSE_OPCODE), x0(x0), y0(y0), rx(rx), ry(ry), color(color) {}
};
struct FillEllipse : Command {
const int16_t x0, y0, rx, ry;
const uint16_t color;
FillEllipse(const int16_t x0, const int16_t y0, const int16_t rx, const int16_t ry,
const uint16_t color) :
Command(FILL_ELLIPSE_OPCODE), x0(x0), y0(y0), rx(rx), ry(ry), color(color) {}
};
struct Drawtext : Command {
const int16_t x, y;
const uint16_t color;
const uint8_t font_number; // Доданий параметр
const std::string text;
Drawtext(int16_t x, int16_t y, uint16_t color, uint8_t font_number, const std::string& text)
: Command(DRAW_TEXT_OPCODE), x(x), y(y), color(color), 
font_number(font_number), text(text) {}
};
struct DrawImage : Command {
const int16_t x0, y0;
const std::vector<uint8_t> imageData;
const int width, height;
DrawImage(int16_t x0, int16_t y0, const std::vector<uint8_t>& imageData, int width, int 
height)
: Command(DRAW_IMAGE_OPCODE), x0(x0), y0(y0), imageData(imageData), 
width(width),
height(height) {}
};
class DisplayProtocol {
public:
void parseCommand(const std::vector<uint8_t>& byteArray, Command*& command) {
if (byteArray.empty()) {
throw std::invalid_argument("Empty byte array");
}
uint8_t opcode = byteArray[0];
switch (opcode) {
case CLEAR_DISPLAY_OPCODE: {
if (byteArray.size() != 3) {
throw std::invalid_argument("Invalid parameters for clear display");
}
uint16_t color = parseColor(byteArray, 1);
command = new fillScreen(color);
break;
}
case DRAW_PIXEL_OPCODE: {
if (byteArray.size() != 7) {
throw std::invalid_argument("Invalid parameters for draw pixel");
}
int16_t x0 = parseInt16(byteArray, 1);
int16_t y0 = parseInt16(byteArray, 3);
uint16_t color = parseColor(byteArray, 5);
int16_t newX = x0 + 50;
int16_t newY = y0 + 50;
command = new DrawPixel(x0, y0, newX, newY, color);
break;
}
case DRAW_LINE_OPCODE: {
if (byteArray.size() != 11) {
throw std::invalid_argument("Invalid parameters for draw line");
}
int16_t x0 = parseInt16(byteArray, 1);
int16_t y0 = parseInt16(byteArray, 3);
int16_t x1 = parseInt16(byteArray, 5);
int16_t y1 = parseInt16(byteArray, 7);
uint16_t color = parseColor(byteArray, 9);
// Логування параметрів
//std::cout << "Received line command: x0=" << x0 << ", y0=" << y0 << ", 
x1=" << x1 << ", y1=" << y1 << ", color=" << color << std::endl;
command = new DrawLine(x0, y0, x1, y1, color);
break;
}
case DRAW_RECTANGLE_OPCODE: {
if (byteArray.size() != 11) {
throw std::invalid_argument("Invalid parameters for draw 
rectangle");
}
int16_t x0 = parseInt16(byteArray, 1);
int16_t y0 = parseInt16(byteArray, 3);
int16_t x1 = parseInt16(byteArray, 5);
int16_t y1 = parseInt16(byteArray, 7);
uint16_t color = parseColor(byteArray, 9);
command = new DrawRectangle(x0, y0, x1, y1, color);
break;
}
case FILL_RECTANGLE_OPCODE: {
if (byteArray.size() != 11) {
throw std::invalid_argument("Invalid parameters for fill rectangle");
}
int16_t x0 = parseInt16(byteArray, 1);
int16_t y0 = parseInt16(byteArray, 3);
int16_t x1 = parseInt16(byteArray, 5);
int16_t y1 = parseInt16(byteArray, 7);
uint16_t color = parseColor(byteArray, 9);
command = new FillRectangle(x0, y0, x1, y1, color);
break;
}
case DRAW_ELLIPSE_OPCODE: {
if (byteArray.size() != 11) {
throw std::invalid_argument("Invalid parameters for draw ellipse");
}
int16_t x0 = parseInt16(byteArray, 1);
int16_t y0 = parseInt16(byteArray, 3);
int16_t rx = parseInt16(byteArray, 5);
int16_t ry = parseInt16(byteArray, 7);
uint16_t color = parseColor(byteArray, 9);
command = new DrawEllipse(x0, y0, rx, ry, color);
break;
}
case DRAW_IMAGE_OPCODE: {
if (byteArray.size() < 9) {
throw std::invalid_argument("Invalid parameters for draw image");
}
int16_t x0 = parseInt16(byteArray, 1);
int16_t y0 = parseInt16(byteArray, 3);
int width = parseInt16(byteArray, 5);
int height = parseInt16(byteArray, 7);
// Убедимся, что размеры согласуются
if (byteArray.size() < 9 + (width * height * 2)) {
throw std::invalid_argument("Incomplete image data");
}
std::vector<uint8_t> imageData(byteArray.begin() + 9, byteArray.end());
command = new DrawImage(x0, y0, imageData, width, height);
break;
}
case FILL_ELLIPSE_OPCODE: {
if (byteArray.size() != 11) {
throw std::invalid_argument("Invalid parameters for fill ellipse");
}
int16_t x0 = parseInt16(byteArray, 1);
int16_t y0 = parseInt16(byteArray, 3);
int16_t rx = parseInt16(byteArray, 5);
int16_t ry = parseInt16(byteArray, 7);
uint16_t color = parseColor(byteArray, 9);
command = new FillEllipse(x0, y0, rx, ry, color);
break;
}
case DRAW_TEXT_OPCODE: {
 if (byteArray.size() < 8) { // Перевірка на розмір масиву байтів
 throw std::invalid_argument("Invalid parameters for draw text");
 }
 // Отримуємо координати
 int16_t x = parseInt16(byteArray, 1);
 int16_t y = parseInt16(byteArray, 3);
 uint16_t color = parseColor(byteArray, 5);
 uint8_t font_number = byteArray[7]; // Отримуємо номер шрифту
//std::cout << ">" << (int)font_number<< "<" << std::endl;
 std::string text(reinterpret_cast<const char*>(&byteArray[8]), byteArray.size() - 8);
 // Створення команди для малювання тексту
 command = new Drawtext(x, y, color, font_number, text);
 break;
}
default:
 throw std::invalid_argument("Invalid command opcode");
}
}
private:
uint16_t parseColor(const std::vector<uint8_t>& byteArray, size_t start) {
return (byteArray[start] << 8) | byteArray[start + 1];
}
int16_t parseInt16(const std::vector<uint8_t>& byteArray, size_t start) {
return (byteArray[start] << 8) | byteArray[start + 1];
}
};
HWND hwnd;
HDC hdc;
DisplayProtocol protocol;
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
switch (uMsg) {
case WM_DESTROY:
PostQuitMessage(0);
return 0;
}
return DefWindowProc(hwnd, uMsg, wParam, lParam);
}
int drawCharacter(HDC hdc, char c, int x, int y, uint16_t color, float scale, float font_number) {
const int baseWidth = 20;
const int baseHeight = 20;
const int width = baseWidth * scale * font_number/10;
const int height = baseHeight * scale * font_number/10;
HPEN pen = CreatePen(PS_SOLID, 1, RGB((color >> 8) & 0xFF, color & 0xFF, 0));
SelectObject(hdc, pen);
int startX = x;
int startY = y;
switch (c) {
case 'A': {
MoveToEx(hdc, startX, startY + height, NULL);
LineTo(hdc, startX + width / 2, startY);
LineTo(hdc, startX + width, startY + height);
MoveToEx(hdc, startX + width / 4, startY + height / 2, NULL);
LineTo(hdc, startX + 3 * width / 4, startY + height / 2);
break;
}
case 'H': {
MoveToEx(hdc, startX, startY, NULL);
LineTo(hdc, startX, startY + height);
MoveToEx(hdc, startX + width, startY, NULL);
LineTo(hdc, startX + width, startY + height);
MoveToEx(hdc, startX, startY + height / 2, NULL);
LineTo(hdc, startX + width, startY + height / 2);
break;
}
case 'E': {
MoveToEx(hdc, startX, startY, NULL);
LineTo(hdc, startX, startY + height);
MoveToEx(hdc, startX, startY, NULL);
LineTo(hdc, startX + width, startY);
MoveToEx(hdc, startX, startY + height / 2, NULL);
LineTo(hdc, startX + width, startY + height / 2);
MoveToEx(hdc, startX, startY + height, NULL);
LineTo(hdc, startX + width, startY + height);
break;
}
case 'L': {
MoveToEx(hdc, startX, startY, NULL);
LineTo(hdc, startX, startY + height);
MoveToEx(hdc, startX, startY + height, NULL);
LineTo(hdc, startX + width, startY + height);
break;
}
case 'O': {
MoveToEx(hdc, startX, startY + height, NULL);
LineTo(hdc, startX + width, startY + height);
LineTo(hdc, startX + width, startY);
LineTo(hdc, startX, startY);
LineTo(hdc, startX, startY + height);
break;
}
case 'W': {
int topLeftX = startX;
int topRightX = startX + width;
int bottomLeftX = startX + width / 4;
int bottomMiddleX = startX + width / 2;
int bottomRightX = startX + 3 * width / 4;
int bottomY = startY + height;
MoveToEx(hdc, topLeftX, startY, NULL);
LineTo(hdc, bottomLeftX, bottomY);
LineTo(hdc, bottomMiddleX, startY + height / 2);
LineTo(hdc, bottomRightX, bottomY);
LineTo(hdc, topRightX, startY);
break;
}
case 'R': {
MoveToEx(hdc, startX, startY, NULL);
LineTo(hdc, startX, startY + height);
MoveToEx(hdc, startX, startY, NULL);
LineTo(hdc, startX + width / 2, startY);
MoveToEx(hdc, startX + width / 2, startY, NULL);
LineTo(hdc, startX + width / 2, startY + height / 2);
MoveToEx(hdc, startX, startY + height / 2, NULL);
LineTo(hdc, startX + width / 2, startY + height / 2);
MoveToEx(hdc, startX + width / 2, startY + height / 2, NULL);
LineTo(hdc, startX + width, startY + height);
break;
}
case 'D': {
MoveToEx(hdc, startX, startY, NULL);
LineTo(hdc, startX, startY + height);
MoveToEx(hdc, startX, startY, NULL);
LineTo(hdc, startX + width / 2, startY);
MoveToEx(hdc, startX, startY + height, NULL);
LineTo(hdc, startX + width / 2, startY + height);
int radius = height / 2;
int centerX = startX + width / 2;
int centerY = startY + height / 2;
Arc(hdc, centerX - radius, centerY - radius, centerX + radius, centerY + radius, startX 
+ width / 2,
startY + height, startX + width / 2, startY);
break;
}
case 'M': {
MoveToEx(hdc, startX, startY, NULL); // Левая вертикальная линия
LineTo(hdc, startX, startY + height);
MoveToEx(hdc, startX, startY, NULL); // Диагональ
LineTo(hdc, startX + width / 2, startY + height / 2);
LineTo(hdc, startX + width, startY); // Вторая диагональ
LineTo(hdc, startX + width, startY + height); // Правая вертикальная линия
break;
}
case 'Y': {
MoveToEx(hdc, startX, startY, NULL);
LineTo(hdc, startX + width / 2, startY + height / 2);
MoveToEx(hdc, startX + width, startY, NULL);
LineTo(hdc, startX + width / 2, startY + height / 2);
MoveToEx(hdc, startX + width / 2, startY + height / 2, NULL);
LineTo(hdc, startX + width / 2, startY + height);
break;
}
case 'N': {
MoveToEx(hdc, startX, startY, NULL);
LineTo(hdc, startX, startY + height);
MoveToEx(hdc, startX + width, startY, NULL);
LineTo(hdc, startX, startY + height);
MoveToEx(hdc, startX + width, startY, NULL);
LineTo(hdc, startX + width, startY + height);
break;
}
case 'S': {
MoveToEx(hdc, startX + width, startY, NULL); // Верхняя линия
LineTo(hdc, startX, startY); // Влево
LineTo(hdc, startX, startY + height / 2); // Вниз до середины
LineTo(hdc, startX + width, startY + height / 2); // Вправо
LineTo(hdc, startX + width, startY + height); // Вниз
LineTo(hdc, startX, startY + height); // Влево
break;
}
case '1': {
MoveToEx(hdc, startX + width / 2, startY, NULL);
LineTo(hdc, startX + width / 2, startY + height);
break;
}
case '2': {
MoveToEx(hdc, startX, startY, NULL);
LineTo(hdc, startX + width, startY);
LineTo(hdc, startX + width, startY + height / 2);
LineTo(hdc, startX, startY + height / 2);
LineTo(hdc, startX, startY + height);
LineTo(hdc, startX + width, startY + height);
break;
}
case '3': {
MoveToEx(hdc, startX, startY, NULL);
LineTo(hdc, startX + width, startY);
LineTo(hdc, startX + width, startY + height / 2);
LineTo(hdc, startX, startY + height / 2);
LineTo(hdc, startX + width, startY + height / 2);
LineTo(hdc, startX + width, startY + height);
LineTo(hdc, startX, startY + height);
break;
}
}
DeleteObject(pen);
return width;
}
void DrawText(HDC hdc, int x, int y, uint16_t color, const std::string& text, float scale, float 
font_number) {
std::cout << ">" << (int)font_number << "<" << std::endl;
int space = (int)(font_number / 10.0 + 1);
for (char c : text) {
int cw = drawCharacter(hdc, c, x, y, color, scale, font_number);
x += cw + space;
}
}
// Функція для малювання
void DrawCommand(Command* command) {
switch (command->opcode) {
case CLEAR_DISPLAY_OPCODE: {
fillScreen* clearCommand = static_cast<fillScreen*>(command);
int r = ((clearCommand->color >> 11) & 0x1F) * 255 / 31;
int g = ((clearCommand->color >> 5) & 0x3F) * 255 / 63;
int b = (clearCommand->color & 0x1F) * 255 / 31;
HBRUSH brush = CreateSolidBrush(RGB(r, g, b));
RECT rect = { 0, 0, 800, 600 };
FillRect(hdc, &rect, brush);
DeleteObject(brush);
break;
}
case DRAW_PIXEL_OPCODE: {
DrawPixel* pixelCommand = static_cast<DrawPixel*>(command);
int pixelSize = 10;
HBRUSH brush = CreateSolidBrush(RGB((pixelCommand->color >> 8) & 0xFF, 
pixelCommand -> color & 0xFF, 0));
RECT rect = { pixelCommand->newX, pixelCommand->newY, 
pixelCommand->newX + pixelSize,
 pixelCommand->newY + pixelSize };
FillRect(hdc, &rect, brush);
DeleteObject(brush);
break;
}
case DRAW_LINE_OPCODE: {
DrawLine* lineCommand = static_cast<DrawLine*>(command);
HPEN pen = CreatePen(PS_SOLID, 1, RGB((lineCommand->color >> 8) & 0xFF, 
lineCommand -> color & 0xFF, 0));
SelectObject(hdc, pen);
MoveToEx(hdc, lineCommand->x0, lineCommand->y0, NULL);
LineTo(hdc, lineCommand->x1, lineCommand->y1);
DeleteObject(pen);
break;
}
case DRAW_RECTANGLE_OPCODE: {
DrawRectangle* rectCommand = static_cast<DrawRectangle*>(command);
HBRUSH brush = CreateSolidBrush(RGB((rectCommand->color >> 8) & 0xFF, 
rectCommand->color& 0xFF, 0));
HPEN pen = CreatePen(PS_SOLID, 1, RGB((rectCommand->color >> 8) & 0xFF, 
rectCommand -> color & 0xFF, 0));
SelectObject(hdc, brush);
SelectObject(hdc, pen);
Rectangle(hdc, rectCommand->x0, rectCommand->y0, rectCommand->x1, 
rectCommand->y1);
DeleteObject(brush);
DeleteObject(pen);
break;
}
case FILL_RECTANGLE_OPCODE: {
FillRectangle* fillRectCommand = static_cast<FillRectangle*>(command);
HBRUSH brush = CreateSolidBrush(RGB((fillRectCommand->color >> 8) & 0xFF, 
fillRectCommand -> color & 0xFF, 0));
SelectObject(hdc, brush);
RECT rect = { fillRectCommand->x0, fillRectCommand->y0, fillRectCommand->x1,
fillRectCommand->y1 };
FillRect(hdc, &rect, brush);
DeleteObject(brush);
break;
}
case DRAW_ELLIPSE_OPCODE: {
DrawEllipse* ellipseCommand = static_cast<DrawEllipse*>(command);
HPEN pen = CreatePen(PS_SOLID, 1, RGB((ellipseCommand->color >> 8) & 0xFF, 
ellipseCommand -> color & 0xFF, 0));
SelectObject(hdc, pen);
Ellipse(hdc, ellipseCommand->x0 - ellipseCommand->rx, ellipseCommand->y0 - ellipseCommand -> 
ry,
ellipseCommand->x0 + ellipseCommand->rx, ellipseCommand->y0 + ellipseCommand->ry);
DeleteObject(pen);
break;
}
case FILL_ELLIPSE_OPCODE: {
FillEllipse* fillEllipseCommand = static_cast<FillEllipse*>(command);
HBRUSH brush = CreateSolidBrush(RGB((fillEllipseCommand->color >> 8) & 0xFF,
fillEllipseCommand->color & 0xFF, 0));
SelectObject(hdc, brush);
Ellipse(hdc, fillEllipseCommand->x0 - fillEllipseCommand->rx, fillEllipseCommand-
>y0 -
fillEllipseCommand->ry,
fillEllipseCommand->x0 + fillEllipseCommand->rx, fillEllipseCommand->y0 +
fillEllipseCommand->ry);
DeleteObject(brush);
break;
}
case DRAW_TEXT_OPCODE: {
Drawtext* textCommand = static_cast<Drawtext*>(command);
int x = textCommand->x;
int y = textCommand->y;
float scale = 0.5f; // Здесь вы можете установить нужное значение масштаба
//float font_number = 1.0f; // Здесь вы можете установить нужное значение 
font_number
for (char c : textCommand->text) {
int cw = drawCharacter(hdc, c, x, y, textCommand->color,
scale,textCommand->font_number);
x += cw + 1; // Добавляем 1 для пробела между символами
}
break;
}
case DRAW_IMAGE_OPCODE: {
DrawImage* drawImageCommand = static_cast<DrawImage*>(command);
BITMAPINFO bmi = { 0 };
bmi.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);
bmi.bmiHeader.biWidth = drawImageCommand->width;
bmi.bmiHeader.biHeight = -drawImageCommand->height; // Відображаємо в 
правильному порядку
bmi.bmiHeader.biPlanes = 1;
bmi.bmiHeader.biBitCount = 32;
bmi.bmiHeader.biCompression = BI_RGB;
// Вирівнюємо буфер по розміру зображення
std::vector<uint8_t> buffer(drawImageCommand->width * drawImageCommand-
>height * 4);
// Перетворення з RGB565 в RGB888
const uint16_t* src = reinterpret_cast<const uint16_t*>(drawImageCommand ->
imageData.data());
uint8_t* dst = buffer.data();
for (int i = 0; i < drawImageCommand->width * drawImageCommand->height; ++i) {
uint16_t pixel = src[i];
uint8_t red = (pixel >> 11) & 0x1F;
uint8_t green = (pixel >> 5) & 0x3F;
uint8_t blue = pixel & 0x1F;
red = (red * 255) / 31;
green = (green * 255) / 63;
blue = (blue * 255) / 31;
dst[i * 4 + 0] = blue;
dst[i * 4 + 1] = green;
dst[i * 4 + 2] = red;
dst[i * 4 + 3] = 255;
}
StretchDIBits(
hdc,
drawImageCommand->x0, drawImageCommand->y0,
drawImageCommand->width, drawImageCommand->height,
0, 0,
drawImageCommand->width, drawImageCommand->height,
buffer.data(),
&bmi,
DIB_RGB_COLORS,
SRCCOPY
);
break;
}
}
}
void NetworkThread(SOCKET serverSocket) {
sockaddr_in clientAddr;
int clientAddrSize = sizeof(clientAddr);
std::vector<uint8_t> buffer(1024);
while (true) {
int recvSize = recvfrom(serverSocket, (char*)buffer.data(), buffer.size(), 0,
(sockaddr*)&clientAddr, &clientAddrSize);
if (recvSize == SOCKET_ERROR) {
std::cerr << "Error receiving data" << std::endl;
continue;
}
Command* command = nullptr;
try {
buffer.resize(recvSize);
protocol.parseCommand(buffer, command);
if (command) {
// Відправка повідомлення для основного потоку для 
малювання
PostMessage(hwnd, WM_USER + 1, 0, (LPARAM)command);
}
}
catch (const std::invalid_argument& e) {
std::cerr << "Error: " << e.what() << std::endl;
}
buffer.resize(1024);
}
}
int main() {
float font_number = 1.0f; // Пример значения, можемо изменить его по мере 
необходимости
// Ініціалізація WinSock
WSAData wsaData;
WORD DLLVersion = MAKEWORD(2, 2);
if (WSAStartup(DLLVersion, &wsaData) != 0) {
std::cerr << "Error initializing WinSock" << std::endl;
return -1;
}
// Налаштування сокета сервера
SOCKET serverSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
if (serverSocket == INVALID_SOCKET) {
std::cerr << "Error creating socket" << std::endl;
WSACleanup();
return -1;
}
sockaddr_in serverAddr;
serverAddr.sin_family = AF_INET;
serverAddr.sin_port = htons(1111); // Порт
serverAddr.sin_addr.s_addr = INADDR_ANY;
if (bind(serverSocket, (sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR) {
std::cerr << "Error binding socket" << std::endl;
closesocket(serverSocket);
WSACleanup();
return -1;
}
// Створення вікна
WNDCLASS wc = { 0 };
wc.lpfnWndProc = WindowProc;
wc.hInstance = GetModuleHandle(NULL);
wc.lpszClassName = L"DrawingWindow";
RegisterClass(&wc);
hwnd = CreateWindow(wc.lpszClassName, L"Graphic Display", WS_OVERLAPPEDWINDOW,
CW_USEDEFAULT, CW_USEDEFAULT, 800, 600, NULL, NULL, wc.hInstance, NULL);
ShowWindow(hwnd, SW_SHOW);
UpdateWindow(hwnd);
hdc = GetDC(hwnd);
// Запуск мережевого потоку
std::thread networkThread(NetworkThread, serverSocket);
networkThread.detach();
// Основний цикл обробки повідомлень
MSG msg;
while (GetMessage(&msg, NULL, 0, 0)) {
TranslateMessage(&msg);
DispatchMessage(&msg);
if (msg.message == WM_USER + 1) {
Command* command = (Command*)msg.lParam;
/*if (command->opcode == DRAW_TEXT_OPCODE) {
Drawtext* textCommand = static_cast<Drawtext*>(command);
DrawText(hdc, textCommand->x, textCommand->y, textCommand-
>color, textCommand->text, 0.5f, textCommand->font_number);
}*/
DrawCommand(command);
delete command;
}
}
ReleaseDC(hwnd, hdc);
closesocket(serverSocket);
WSACleanup();
return 0;
}
