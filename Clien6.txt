#include "GraphicsLib.h"
#include <iostream>
#include <vector>
#include <winsock2.h>
#include <cstdint>
#include <string>
#pragma comment(lib, "ws2_32.lib")
#pragma warning(disable: 4996)
// Визначаємо набір опкодів для різних графічних команд
enum CommandOpcode {
 CLEAR_DISPLAY_OPCODE, // Очищення екрану
 DRAW_PIXEL_OPCODE, // Малювання одного пікселя
 DRAW_LINE_OPCODE, // Малювання лінії
 DRAW_RECTANGLE_OPCODE, // Малювання прямокутника
 FILL_RECTANGLE_OPCODE, // Заповнення прямокутника
 DRAW_ELLIPSE_OPCODE, // Малювання еліпса
 FILL_ELLIPSE_OPCODE, // Заповнення еліпса
 DRAW_IMAGE_OPCODE, // Малювання зображення
 DRAW_TEXT_OPCODE // Відображення тексту
};
// Клас клієнта для роботи з дисплеєм через сокетне з'єднання
class DisplayClient : public GraphicsLib {
public:
 DisplayClient(uint_least16_t w, uint_least16_t h, const std::string& 
ipAddress, uint16_t port)
 : GraphicsLib(w, h), ipAddress(ipAddress), port(port) {
 initSocket(); // Ініціалізація сокета
 }
 ~DisplayClient() {
 closesocket(clientSocket); // Закриваємо сокет
 WSACleanup(); // Завершуємо роботу з WinSock
 }
 // Очищення екрану заданим кольором
 void fillScreen(uint_least16_t color) override {
 std::vector<uint8_t> command = { CLEAR_DISPLAY_OPCODE };
 addColorToCommand(command, color); // Додаємо колір до команди
 sendCommand(command); // Відправляємо команду
 }
 // Малювання пікселя за заданими координатами і кольором
 void drawPixel(int_least16_t x0, int_least16_t y0, uint_least16_t color) 
override {
 std::vector<uint8_t> command = { DRAW_PIXEL_OPCODE };
 addCoordinatesToCommand(command, x0, y0); // Додаємо координати
 addColorToCommand(command, color); // Додаємо колір
 sendCommand(command); // Відправляємо команду
 }
 // Малювання лінії між двома точками
 void drawLine(int_least16_t x0, int_least16_t y0, int_least16_t x1, 
int_least16_t y1, uint_least16_t color) override {
 std::vector<uint8_t> command = { DRAW_LINE_OPCODE };
 addCoordinatesToCommand(command, x0, y0); // Координати початку лінії
 addCoordinatesToCommand(command, x1, y1); // Координати кінця лінії
 addColorToCommand(command, color); // Колір лінії
 // Логування параметрів
 //std::cout << "Sending line command: x0=" << x0 << ", y0=" << y0 << ", 
x1=" << x1 << ", y1=" << y1 << ", color=" << color << std::endl;
 sendCommand(command); // Відправляємо команду
 }
 // Малювання прямокутника
 void drawRect(int_least16_t x0, int_least16_t y0, int_least16_t w, 
int_least16_t h, uint_least16_t color) override {
 std::vector<uint8_t> command = { DRAW_RECTANGLE_OPCODE };
 addCoordinatesToCommand(command, x0, y0); // Початкова точка
 addCoordinatesToCommand(command, x0 + w, y0 + h); // Протилежний кут
 addColorToCommand(command, color); // Колір
 sendCommand(command); // Відправляємо команду
 }
 // Заповнення прямокутника
 void fillRect(int_least16_t x0, int_least16_t y0, int_least16_t w, 
int_least16_t h, uint_least16_t color) override {
 std::vector<uint8_t> command = { FILL_RECTANGLE_OPCODE };
 addCoordinatesToCommand(command, x0, y0); // Початкова точка
 addCoordinatesToCommand(command, x0 + w, y0 + h); // Протилежний кут
 addColorToCommand(command, color); // Колір
 sendCommand(command); // Відправляємо команду
 }
 // Малювання зображення
 void drawImage(int_least16_t x0, int_least16_t y0, const
std::vector<uint8_t>& imageData, int width, int height) {
 std::vector<uint8_t> command = { DRAW_IMAGE_OPCODE }; // Створення 
команди
 addCoordinatesToCommand(command, x0, y0); // Додавання координат 
верхнього лівого кута
 command.push_back(width >> 8); // Додавання ширини зображення
 command.push_back(width & 0xFF);
 command.push_back(height >> 8); // Додавання висоти зображення
 command.push_back(height & 0xFF);
 // Додавання даних зображення до команди
 command.insert(command.end(), imageData.begin(), imageData.end());
 sendCommand(command); // Відправлення команди
 }
 void drawText(int16_t x0, int16_t y0, uint16_t color, uint8_t font_number, 
int16_t length, const std::string& text) {
 std::vector<uint8_t> command;
 command.push_back(DRAW_TEXT_OPCODE);
 // Додаємо координати тексту
 command.push_back(x0 >> 8);
 command.push_back(x0 & 0xFF);
 command.push_back(y0 >> 8);
 command.push_back(y0 & 0xFF);
 // Додаємо колір тексту
 command.push_back(color >> 8);
 command.push_back(color & 0xFF);
 // Додаємо номер шрифту
 command.push_back(font_number);
 // Додаємо текст
 command.insert(command.end(), text.begin(), text.end());
 // Відправляємо команду
 sendCommand(command);
 }
 // Малювання еліпса
 void drawEllipse(int_least16_t x0, int_least16_t y0, int_least16_t r_x, 
int_least16_t r_y, uint_least16_t color) override {
 std::vector<uint8_t> command = { DRAW_ELLIPSE_OPCODE };
 addCoordinatesToCommand(command, x0, y0); // Координати центру
 addCoordinatesToCommand(command, r_x, r_y); // Радіуси
 addColorToCommand(command, color); // Колір
 sendCommand(command); // Відправляємо команду
 }
 // Заповнення еліпса
 void fillEllipse(int_least16_t x0, int_least16_t y0, int_least16_t r_x, 
int_least16_t r_y, uint_least16_t color) override {
 std::vector<uint8_t> command = { FILL_ELLIPSE_OPCODE };
 addCoordinatesToCommand(command, x0, y0); // Координати центру
 addCoordinatesToCommand(command, r_x, r_y); // Радіуси
 addColorToCommand(command, color); // Колір
 sendCommand(command); // Відправляємо команду
 }
private:
 SOCKET clientSocket;
 sockaddr_in serverAddr;
 std::string ipAddress;
 uint16_t port;
 void initSocket() {
 WSAData wsaData;
 WORD DLLVersion = MAKEWORD(2, 2);
 if (WSAStartup(DLLVersion, &wsaData) != 0) {
 throw std::runtime_error("Помилка ініціалізації WinSock");
 }
 clientSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
 if (clientSocket == INVALID_SOCKET) {
 WSACleanup();
 throw std::runtime_error("Помилка створення сокета");
 }
 serverAddr.sin_family = AF_INET;
 serverAddr.sin_port = htons(port);
 serverAddr.sin_addr.s_addr = inet_addr(ipAddress.c_str());
 }
 void sendCommand(const std::vector<uint8_t>& command) {
 sendto(clientSocket, (char*)command.data(), command.size(), 0, 
(sockaddr*)&serverAddr, sizeof(serverAddr));
 }
 // Додавання кольору до команди
 void addColorToCommand(std::vector<uint8_t>& command, uint16_t color) {
 command.push_back((color >> 8) & 0xFF);
 command.push_back(color & 0xFF);
 }
 // Додавання координат до команди
 void addCoordinatesToCommand(std::vector<uint8_t>& command, int16_t x, 
int16_t y) {
 command.push_back((x >> 8) & 0xFF);
 command.push_back(x & 0xFF);
 command.push_back((y >> 8) & 0xFF);
 command.push_back(y & 0xFF);
 }
};
// Основна функція програми
int main() {
 try {
 DisplayClient display(800, 600, "127.0.0.1", 1111);
 display.fillScreen(toRGB565(255, 255, 255)); // Очищення екрану білим 
кольором
 // Відображення тексту
 display.drawText(50, 50, toRGB565(255, 0, 0), 11, 200, "H E L L O");
 display.drawText(100, 100, toRGB565(0, 255, 0), 22, 200, "W O R L D 
");
 display.drawText(150, 150, toRGB565(0, 0, 255), 13, 200, "1 2 3 ");
 display.drawLine(10, 10, 20, 20, toRGB565(0, 0, 255));
 
 }
 catch (const std::exception& e) {
 std::cerr << "Exception: " << e.what() << std::endl;
 }
 return 0;
}
